import React, { useState } from 'react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Music, Zap, Moon, TrendingUp } from 'lucide-react';
import FeatureCard from '@/components/FeatureCard';

interface SpotifyTrack {
  id: string;
  name: string;
  artists: { name: string }[];
  popularity: number;
  uri: string;
  played_at?: string;
}

interface SpotifyArtist {
  id: string;
  name: string;
  genres: string[];
}

interface SpecialHighlightsProps {
  spotifyAccessToken: string;
  spotifyUserId: string;
  topTracks: SpotifyTrack[];
  topArtists: SpotifyArtist[];
  recentlyPlayed: SpotifyTrack[];
  isLocked: boolean;
  hasActiveSubscription: boolean;
}

const SpecialHighlights: React.FC<SpecialHighlightsProps> = ({
  spotifyAccessToken,
  spotifyUserId,
  topTracks,
  topArtists,
  recentlyPlayed,
  isLocked,
  hasActiveSubscription
}) => {
  const [creatingPlaylist, setCreatingPlaylist] = useState(false);

  const getHiddenGem = () => {
    const hidden = topTracks.filter(t => t.popularity < 50);
    return hidden.length ? hidden[0] : topTracks[Math.floor(Math.random() * topTracks.length)];
  };

  const getLateNightTracks = () => {
    const filtered = recentlyPlayed.filter(t => t.played_at && (() => {
      const hr = new Date(t.played_at!).getHours();
      return hr >= 22 || hr <= 4;
    })());
    const unique = Array.from(new Map(filtered.map(t => [t.id, t])).values());
    return unique.slice(0, 3);
  };

  const getSleeperHits = () => topTracks.slice(3, 6);

  const handleGeneratePlaylist = async () => {
    if (!hasActiveSubscription || creatingPlaylist) return;
    if (!spotifyAccessToken || !spotifyUserId) {
      alert('Spotify not connected');
      return;
    }

    setCreatingPlaylist(true);
    try {
      const unique = Array.from(new Map(topTracks.map(t => [t.name + t.artists[0]?.name, t])).values());
      const uris = unique.sort((a, b) => b.popularity - a.popularity).slice(0, 50).map(t => t.uri);

      const createRes = await fetch(
        `https://api.spotify.com/v1/users/${spotifyUserId}/playlists`,
        {
          method: 'POST',
          headers: { Authorization: `Bearer ${spotifyAccessToken}`, 'Content-Type': 'application/json' },
          body: JSON.stringify({
            name: 'ðŸŽ§ MyVibeLytics AI Mix',
            public: false,
            description: 'Generated by MyVibeLytics AI'
          })
        }
      );
      const playlist = await createRes.json();
      if (!createRes.ok) throw new Error('Playlist create failed');

      const addRes = await fetch(
        `https://api.spotify.com/v1/playlists/${playlist.id}/tracks`,
        {
          method: 'POST',
          headers: { Authorization: `Bearer ${spotifyAccessToken}`, 'Content-Type': 'application/json' },
          body: JSON.stringify({ uris })
        }
      );
      if (!addRes.ok) throw new Error('Adding tracks failed');

      alert('ðŸŽ‰ Playlist created! Check your Spotify library.');
    } catch (e) {
      console.error(e);
      alert('Failed to create AI playlist.');
    } finally {
      setCreatingPlaylist(false);
    }
  };

  const hiddenGem = getHiddenGem();
  const lateNight = getLateNightTracks();
  const sleeperHits = getSleeperHits();

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {/* AI Playlist */}
      <FeatureCard
        title="Make Playlist from Listening"
        description="AI-generated playlists based on your taste"
        icon={<Music className="h-5 w-5 text-green-400" />}
        isLocked={isLocked}
      >
        <Button
          onClick={handleGeneratePlaylist}
          disabled={!hasActiveSubscription || creatingPlaylist}
          className="w-full bg-green-500 hover:bg-green-600 text-white"
        >
          {creatingPlaylist ? 'Creatingâ€¦' : 'Generate AI Playlist'}
        </Button>
      </FeatureCard>

      {/* Hidden Gem */}
      <FeatureCard
        title="Hidden Gem Discovery"
        description="Most-played underrated track"
        icon={<Zap className="h-5 w-5 text-cyan-400" />}
        isLocked={isLocked}
      >
        <div className="text-center py-4">
          <Zap className="h-8 w-8 text-cyan-400 mx-auto mb-2" />
          <h4 className="text-white font-semibold text-sm">{hiddenGem.name}</h4>
          <p className="text-gray-300 text-xs">{hiddenGem.artists[0]?.name}</p>
          <Badge variant="outline" className="mt-2 text-cyan-400 border-cyan-400 text-xs">
            Hidden Gem â€¢ {hiddenGem.popularity}% pop.
          </Badge>
        </div>
      </FeatureCard>

      {/* Late Night Offenders */}
      <FeatureCard
        title="Late Night Repeat Offenders"
        description="Songs often repeated late night"
        icon={<Moon className="h-5 w-5 text-purple-400" />}
        isLocked={isLocked}
      >
        <div className="space-y-2">
          {lateNight.length ? (
            lateNight.map(t => (
              <div key={t.id} className="text-center">
                <p className="text-sm font-medium text-foreground truncate">{t.name}</p>
                <p className="text-xs text-muted-foreground truncate">{t.artists[0]?.name}</p>
              </div>
            ))
          ) : (
            <div className="text-center py-4">
              <Moon className="h-8 w-8 text-purple-400 mx-auto mb-2" />
              <p className="text-sm text-muted-foreground">No late-night repeats detected</p>
            </div>
          )}
        </div>
      </FeatureCard>

      {/* Sleeper Hits */}
      <FeatureCard
        title="Sleeper Hits"
        description="Songs that grew on you over time"
        icon={<TrendingUp className="h-5 w-5 text-green-400" />}
        isLocked={isLocked}
      >
        <div className="space-y-3">
          {sleeperHits.map(t => (
            <div key={t.id} className="text-center">
              <p className="text-sm font-medium text-foreground truncate">{t.name}</p>
              <p className="text-xs text-muted-foreground truncate">{t.artists[0]?.name}</p>
              <Badge variant="outline" className="mt-1 text-green-400 border-green-400 text-xs">
                Growing favorite
              </Badge>
            </div>
          ))}
        </div>
      </FeatureCard>
    </div>
  );
};

export default SpecialHighlights;
