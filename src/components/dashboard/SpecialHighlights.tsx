// SpecialHighlights: Modern, Functional, with AI Playlist and Community Chat
import React, { useState } from 'react';
import {
  Card, CardHeader, CardTitle, CardDescription, CardContent,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Sparkles, MessageCircle, UserPlus } from 'lucide-react';
import { toast } from 'sonner';

interface SpotifyTrack {
  id: string;
  name: string;
  artists: { name: string }[];
  album: { name: string; images: { url: string }[] };
  popularity: number;
  preview_url?: string;
  external_urls: { spotify: string };
  uri: string;
}

interface SpotifyArtist {
  id: string;
  name: string;
  genres: string[];
  followers: { total: number };
  images: { url: string }[];
  popularity: number;
  external_urls: { spotify: string };
}

interface Props {
  spotifyAccessToken: string;
  spotifyUserId: string;
  topTracks: SpotifyTrack[];
  topArtists: SpotifyArtist[];
  recentlyPlayed: SpotifyTrack[];
  isLocked: boolean;
  hasActiveSubscription: boolean;
}

const SpecialHighlights: React.FC<Props> = ({
  spotifyAccessToken,
  spotifyUserId,
  topTracks,
  topArtists,
  recentlyPlayed,
  isLocked,
  hasActiveSubscription,
}) => {
  const [isCreating, setIsCreating] = useState(false);
  const [progress, setProgress] = useState(0);
  const [message, setMessage] = useState('');

  const createAIPlaylist = async () => {
    if (!hasActiveSubscription || isLocked) {
      toast.error('Premium required to create AI playlist');
      return;
    }

    setIsCreating(true);
    setMessage('Starting playlist creation...');

    try {
      const artistSeeds = topArtists.slice(0, 3).map(a => a.id).join(',');
      const trackSeeds = topTracks.slice(0, 3).map(t => t.id).join(',');

      const recommendations = await fetch(`https://api.spotify.com/v1/recommendations?limit=100&seed_tracks=${trackSeeds}&seed_artists=${artistSeeds}`, {
        headers: { Authorization: `Bearer ${spotifyAccessToken}` }
      }).then(res => res.json());

      setProgress(60);
      setMessage('Generating playlist...');

      const createRes = await fetch(`https://api.spotify.com/v1/users/${spotifyUserId}/playlists`, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${spotifyAccessToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: `AI Discovery Mix - ${new Date().toLocaleDateString()}`,
          description: 'Generated by MyVibeLytics AI',
          public: false
        })
      });
      const playlist = await createRes.json();

      setProgress(80);
      setMessage('Adding tracks...');

      const trackUris = recommendations.tracks.map((track: any) => track.uri);
      await fetch(`https://api.spotify.com/v1/playlists/${playlist.id}/tracks`, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${spotifyAccessToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ uris: trackUris })
      });

      setProgress(100);
      setMessage('Playlist created! ðŸŽ‰');
      toast.success('AI Playlist created and added to your Spotify!');
    } catch (error) {
      toast.error('Something went wrong creating the playlist');
    } finally {
      setTimeout(() => {
        setIsCreating(false);
        setProgress(0);
        setMessage('');
      }, 2500);
    }
  };

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      {/* AI Playlist Generator */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Sparkles className="mr-2 h-5 w-5 text-purple-500" />
            AI Playlist Generator
          </CardTitle>
          <CardDescription>Create a playlist based on your vibe</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {isCreating && (
            <div>
              <Progress value={progress} />
              <p className="text-sm mt-2 text-muted-foreground">{message}</p>
            </div>
          )}
          <Button onClick={createAIPlaylist} disabled={isCreating || isLocked} className="w-full">
            {isCreating ? 'Creating...' : isLocked ? 'Premium Required' : 'Generate 100-Song AI Playlist'}
          </Button>
        </CardContent>
      </Card>

      {/* Community Chat */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <MessageCircle className="mr-2 h-5 w-5 text-blue-500" />
            Chat with Community
          </CardTitle>
          <CardDescription>Share discoveries or get music tips</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            <div className="text-sm p-3 bg-muted/50 rounded-md">
              <strong>ðŸŽ¶ LofiVibes:</strong> Just discovered an amazing chill-hop track from the playlist!
            </div>
            <div className="text-sm p-3 bg-muted/50 rounded-md">
              <strong>ðŸ”¥ Rocker2025:</strong> Anyone else loving the AI recommendations today?
            </div>
            <div className="text-sm p-3 bg-muted/50 rounded-md">
              <strong>ðŸŒŸ SynthWizard:</strong> Drop your best underrated tracks ðŸ‘‡
            </div>
            <div className="pt-2">
              <Button variant="outline" className="w-full flex items-center justify-center space-x-2">
                <UserPlus className="h-4 w-4" />
                <span>Join Discussion</span>
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default SpecialHighlights;
