// SpecialHighlights: Modern, Functional, with AI Playlist and Community Chat
import React, { useState } from 'react';
import {
  Card, CardHeader, CardTitle, CardDescription, CardContent,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Sparkles, MessageCircle, UserPlus } from 'lucide-react';
import { toast } from 'sonner';
import ChatModal from '@/components/chat/ChatModal';

interface SpotifyTrack {
  id: string;
  name: string;
  artists: { name: string }[];
  album: { name: string; images: { url: string }[] };
  popularity: number;
  preview_url?: string;
  external_urls: { spotify: string };
  uri: string;
}

interface SpotifyArtist {
  id: string;
  name: string;
  genres: string[];
  followers: { total: number };
  images: { url: string }[];
  popularity: number;
  external_urls: { spotify: string };
}

interface Props {
  spotifyAccessToken: string;
  spotifyUserId: string;
  topTracks: SpotifyTrack[];
  topArtists: SpotifyArtist[];
  recentlyPlayed: SpotifyTrack[];
  isLocked: boolean;
  hasActiveSubscription: boolean;
}

const SpecialHighlights: React.FC<Props> = ({
  spotifyAccessToken,
  spotifyUserId,
  topTracks,
  topArtists,
  recentlyPlayed,
  isLocked,
  hasActiveSubscription,
}) => {
  const [isCreating, setIsCreating] = useState(false);
  const [progress, setProgress] = useState(0);
  const [message, setMessage] = useState('');
  const [isChatOpen, setIsChatOpen] = useState(false);

  const createAIPlaylist = async () => {
    if (!hasActiveSubscription || isLocked) {
      toast.error('Premium required to create AI playlist');
      return;
    }

    if (!spotifyAccessToken) {
      toast.error('Spotify connection required');
      return;
    }

    if (topTracks.length === 0 || topArtists.length === 0) {
      toast.error('Not enough listening data to create playlist');
      return;
    }

    setIsCreating(true);
    setMessage('Starting playlist creation...');
    setProgress(10);

    try {
      const artistSeeds = topArtists.slice(0, 2).map(a => a.id).join(',');
      const trackSeeds = topTracks.slice(0, 3).map(t => t.id).join(',');

      setProgress(30);
      setMessage('Fetching recommendations...');

      const recommendationsUrl = `https://api.spotify.com/v1/recommendations?limit=50&seed_tracks=${trackSeeds}&seed_artists=${artistSeeds}`;
      
      const recommendationsRes = await fetch(recommendationsUrl, {
        headers: { Authorization: `Bearer ${spotifyAccessToken}` }
      });

      if (!recommendationsRes.ok) {
        throw new Error(`Recommendations failed: ${recommendationsRes.status}`);
      }

      const recommendations = await recommendationsRes.json();

      if (!recommendations.tracks || recommendations.tracks.length === 0) {
        throw new Error('No recommendations received');
      }

      setProgress(60);
      setMessage('Creating playlist...');

      const createRes = await fetch(`https://api.spotify.com/v1/users/${spotifyUserId}/playlists`, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${spotifyAccessToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: `AI Discovery Mix - ${new Date().toLocaleDateString()}`,
          description: 'Generated by MyVibeLytics AI based on your listening habits',
          public: false
        })
      });

      if (!createRes.ok) {
        throw new Error(`Playlist creation failed: ${createRes.status}`);
      }

      const playlist = await createRes.json();

      setProgress(80);
      setMessage('Adding tracks to playlist...');

      const trackUris = recommendations.tracks.map((track: any) => track.uri);
      
      const addTracksRes = await fetch(`https://api.spotify.com/v1/playlists/${playlist.id}/tracks`, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${spotifyAccessToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ uris: trackUris })
      });

      if (!addTracksRes.ok) {
        throw new Error(`Adding tracks failed: ${addTracksRes.status}`);
      }

      setProgress(100);
      setMessage('Playlist created successfully! ðŸŽ‰');
      toast.success(`AI Playlist created with ${trackUris.length} tracks!`);
      
    } catch (error: any) {
      console.error('Playlist creation error:', error);
      toast.error(`Failed to create playlist: ${error.message}`);
    } finally {
      setTimeout(() => {
        setIsCreating(false);
        setProgress(0);
        setMessage('');
      }, 3000);
    }
  };

  return (
    <>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* AI Playlist Generator */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Sparkles className="mr-2 h-5 w-5 text-purple-500" />
              AI Playlist Generator
            </CardTitle>
            <CardDescription>Create a playlist based on your listening habits</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {isCreating && (
              <div>
                <Progress value={progress} className="mb-2" />
                <p className="text-sm text-muted-foreground">{message}</p>
              </div>
            )}
            <Button 
              onClick={createAIPlaylist} 
              disabled={isCreating || isLocked || !spotifyAccessToken} 
              className="w-full"
            >
              {isCreating ? 'Creating...' : isLocked ? 'Premium Required' : 'Generate AI Playlist'}
            </Button>
            {!spotifyAccessToken && (
              <p className="text-xs text-muted-foreground">
                Spotify connection required for playlist creation
              </p>
            )}
          </CardContent>
        </Card>

        {/* Community Chat */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <MessageCircle className="mr-2 h-5 w-5 text-blue-500" />
              Community Chat
            </CardTitle>
            <CardDescription>Connect with music lovers worldwide - Free for everyone!</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="text-sm p-3 bg-muted/50 rounded-md">
                <strong>ðŸŽ¶ LofiVibes:</strong> Just discovered an amazing chill-hop track!
              </div>
              <div className="text-sm p-3 bg-muted/50 rounded-md">
                <strong>ðŸ”¥ MusicLover:</strong> Anyone else loving the new indie releases?
              </div>
              <div className="text-sm p-3 bg-muted/50 rounded-md">
                <strong>ðŸŒŸ VinyBot:</strong> Drop your best underrated artists! ðŸ‘‡
              </div>
              <div className="pt-2">
                <Button 
                  onClick={() => setIsChatOpen(true)}
                  className="w-full flex items-center justify-center space-x-2"
                >
                  <MessageCircle className="h-4 w-4" />
                  <span>Join Community Chat</span>
                </Button>
                <p className="text-xs text-center text-muted-foreground mt-2">
                  ðŸŽ‰ Free for all users! Find friends by username
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <ChatModal isOpen={isChatOpen} onClose={() => setIsChatOpen(false)} />
    </>
  );
};

export default SpecialHighlights;
